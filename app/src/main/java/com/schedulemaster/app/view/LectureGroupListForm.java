package com.schedulemaster.app.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.schedulemaster.app.controller.MagicController;
import com.schedulemaster.app.controller.UserController;
import com.schedulemaster.app.util.Translator;
import com.schedulemaster.app.view.content.ContentForm;
import com.schedulemaster.misc.LinkedList;
import com.schedulemaster.model.Lecture;
import com.schedulemaster.model.LectureTime;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class LectureGroupListForm extends ComponentGroup {
    private JPanel panel;
    private JPanel lectureGroupListPanel;
    private JButton groupAddButton;
    private JButton doneButton;
    private JPanel controlPanel;

    private GridLayout gridLayout;

    private final LinkedList<LectureGroupForm> lectureGroupForms = new LinkedList<>();
    private final MainFrame frame;

    public LectureGroupListForm(MainFrame frame, SelectableTimeTable selectableTimeTable) {
        this.frame = frame;
        $$$setupUI$$$();

        addGroup();
        groupAddButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                addGroup();
            }
        });
        doneButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                UserController userController = frame.getUserController();
                LectureTime unwantedTime = selectableTimeTable.getSelectedTime();
                userController.setUnwantedTime(unwantedTime);

                setupMagic();
            }
        });
        addLocaleChangeListener(() -> {
            groupAddButton.setText(Translator.getBundleString("group_add_btn"));
            doneButton.setText(Translator.getBundleString("done_btn"));
        });
    }

    private void setupMagic() {
        try {
            MagicController magicController = frame.getMagicController();
            int i = 0;
            for (LectureGroupForm lectureGroupForm : lectureGroupForms) {
                LinkedList<Lecture> lectures = lectureGroupForm.getLectures();
                magicController.addGroup();
                for (Lecture lecture : lectures)
                    magicController.addLecture(i, lecture, 0);
                i += 1;
            }
            frame.setContentForm(ContentForm.Content.MagicSelector);
        } catch (RuntimeException e) {
            String msg = ResourceBundle.getBundle(MainFrame.RESOURCE_BUNDLE_NAME).getString("reduplication");
            String title = ResourceBundle.getBundle(MainFrame.RESOURCE_BUNDLE_NAME).getString("error");
            JOptionPane.showMessageDialog(frame, msg, title, JOptionPane.ERROR_MESSAGE);
            frame.getMagicController().init();
        }
    }

    public void addGroup() {
        int groupCount = lectureGroupForms.getLength() + 1;
        LectureGroupForm lectureGroupForm = new LectureGroupForm(frame, this, groupCount);
        gridLayout.setRows(groupCount);
        lectureGroupListPanel.add(lectureGroupForm.getPanel());
        lectureGroupForms.push(lectureGroupForm);

        lectureGroupListPanel.revalidate();
        lectureGroupListPanel.repaint();

        addComponentForm(lectureGroupForm);
    }

    public void deleteGroup(LectureGroupForm lectureGroupForm) {
        lectureGroupForms.remove(lectureGroupForm);
        lectureGroupListPanel.remove(lectureGroupForm.getPanel());
        removeComponentForm(lectureGroupForm);

        gridLayout.setRows(lectureGroupForms.getLength());
        reorderGroups();

        lectureGroupListPanel.revalidate();
        lectureGroupListPanel.repaint();
    }

    private void reorderGroups() {
        int index = 1;
        for (LectureGroupForm lectureGroupForm : lectureGroupForms) {
            lectureGroupForm.setGroupNumber(index);
            index += 1;
        }
    }

    @Override
    public JPanel getPanel() {
        return panel;
    }

    private void createUIComponents() {
        lectureGroupListPanel = new JPanel();
        gridLayout = new GridLayout(1, 1);
        lectureGroupListPanel.setLayout(gridLayout);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setHorizontalScrollBarPolicy(30);
        scrollPane1.setVerticalScrollBarPolicy(22);
        panel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(15, 0, 0, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        scrollPane1.setViewportView(lectureGroupListPanel);
        controlPanel = new JPanel();
        controlPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(controlPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        controlPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 15, 15, 15), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        groupAddButton = new JButton();
        this.$$$loadButtonText$$$(groupAddButton, this.$$$getMessageFromBundle$$$("string", "group_add_btn"));
        controlPanel.add(groupAddButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        doneButton = new JButton();
        this.$$$loadButtonText$$$(doneButton, this.$$$getMessageFromBundle$$$("string", "done_btn"));
        controlPanel.add(doneButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        controlPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
