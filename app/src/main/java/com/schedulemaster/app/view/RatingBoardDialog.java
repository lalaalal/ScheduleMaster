package com.schedulemaster.app.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.schedulemaster.app.ResponseStatus;
import com.schedulemaster.app.controller.LectureController;
import com.schedulemaster.app.controller.UserController;
import com.schedulemaster.app.misc.RangedSpinnerNumberModel;
import com.schedulemaster.app.util.Translator;
import com.schedulemaster.model.LectureRating;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class RatingBoardDialog extends JDialog {
    private JPanel panel;
    private JList<LectureRating.Rating> ratingList;
    private JTextField commentTextField;
    private JButton commitButton;
    private JSpinner ratingSpinner;
    private JLabel lectureNameLabel;
    private JButton removeRatingButton;
    private final DefaultListModel<LectureRating.Rating> listModel = new DefaultListModel<>();
    private final LectureController lectureController;
    private final String lectureNum;
    private final MainFrame mainFrame;

    public RatingBoardDialog(MainFrame mainFrame, String lectureNum) {
        super(mainFrame, true);
        this.mainFrame = mainFrame;
        lectureController = mainFrame.getLectureController();
        this.lectureNum = lectureNum;
        setSize(700, 500);
        $$$setupUI$$$();
        setContentPane(panel);
        removeRatingButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    lectureController.removeLectureRating(lectureNum);
                    refresh();
                } catch (IOException ex) {
                    String title = Translator.getBundleString("error");
                    String message = Translator.getBundleString("connection_fail");
                    JOptionPane.showMessageDialog(mainFrame, message, title, JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        commitButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    UserController userController = mainFrame.getUserController();
                    int rate = (int) ratingSpinner.getValue();
                    String comment = commentTextField.getText();
                    LectureRating.Rating rating = new LectureRating.Rating(lectureNum, userController.getUser(), rate, comment);
                    ResponseStatus status = lectureController.addLectureRating(rating);
                    if (status.status()) {
                        listModel.addElement(rating);
                    } else {
                        String title = Translator.getBundleString("error");
                        String message = Translator.getBundleString(status.msg());
                        JOptionPane.showMessageDialog(mainFrame, message, title, JOptionPane.ERROR_MESSAGE);
                    }
                } catch (IOException exception) {
                    String title = Translator.getBundleString("error");
                    String message = Translator.getBundleString("connection_fail");
                    JOptionPane.showMessageDialog(mainFrame, message, title, JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    private void refresh() {
        try {
            listModel.removeAllElements();
            LectureRating lectureRating = lectureController.getLectureRating(lectureNum);
            setLectureRating(lectureRating);
        } catch (IOException e) {
            String title = Translator.getBundleString("error");
            String message = Translator.getBundleString("connection_fail");
            JOptionPane.showMessageDialog(mainFrame, message, title, JOptionPane.ERROR_MESSAGE);
        }
    }

    public void setLectureRating(LectureRating lectureRating) {
        for (LectureRating.Rating rating : lectureRating.getRatings())
            listModel.addElement(rating);
        lectureNameLabel.setText(lectureRating.getLectureName());
    }

    private void createUIComponents() {
        ratingList = new JList<>(listModel);
        ratingSpinner = new JSpinner(new RangedSpinnerNumberModel(0, 5));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(3, 1, new Insets(15, 15, 15, 15), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(ratingList);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        commentTextField = new JTextField();
        panel1.add(commentTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        commitButton = new JButton();
        this.$$$loadButtonText$$$(commitButton, this.$$$getMessageFromBundle$$$("string", "commit"));
        panel1.add(commitButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(ratingSpinner, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeRatingButton = new JButton();
        this.$$$loadButtonText$$$(removeRatingButton, this.$$$getMessageFromBundle$$$("string", "remove_my_rating"));
        panel1.add(removeRatingButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lectureNameLabel = new JLabel();
        lectureNameLabel.setText("Label");
        panel.add(lectureNameLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
